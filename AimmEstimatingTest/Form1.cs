using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Columns;
using DevExpress.XtraTreeList.Nodes;
using System.Data.Entity;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Tile;
using DevExpress.XtraGrid.Views.Tile.ViewInfo;
using DevExpress.XtraGrid.Views.Base;

namespace AimmEstimatingTest
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        public Form1()
        {
            InitializeComponent();
            InitTreeList();
            InitGrids();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            AIMM_DevEntities dbContext = new AIMM_DevEntities();
            //using(AIMM_DevEntities dbContext = new AIMM_DevEntities())
            //{
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.EstimateProjectTypes.LoadAsync().ContinueWith(loadTask =>
                {
                    // Bind data to control when loading complete
                    estimateProjectTypesBindingSource.DataSource = dbContext.EstimateProjectTypes.Local.ToBindingList();
                }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            //}
            AIMM_DevEntities dbContext2 = new AIMM_DevEntities();
            //using(AIMM_DevEntities dbContext2 = new AIMM_DevEntities())
            //{
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext2.EstimateCalculators.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                estimateCalculatorsBindingSource.DataSource = dbContext2.EstimateCalculators.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            //}
        }
        Color[] projectTypeColors =
        {
            Color.Black,
            Color.AliceBlue,
            Color.Beige,
            Color.CadetBlue,
            Color.Cyan,
            Color.Honeydew,
            Color.LightGoldenrodYellow,
            Color.LightSalmon,
            Color.LightSteelBlue,
            Color.SandyBrown
        };



        #region TreeList init and events

        void InitTreeList()
        {
            treeList1.ForceInitialize();
            treeList1.OptionsBehavior.Editable = false;
            treeList1.OptionsView.FocusRectStyle = DevExpress.XtraTreeList.DrawFocusRectStyle.None;
            treeList1.ViewStyle = TreeListViewStyle.TreeView;

            // create a column
            TreeListColumn col1 = treeList1.Columns.Add();
            col1.VisibleIndex = 0;

            // allow drag-drop
            treeList1.OptionsDragAndDrop.DragNodesMode = DragNodesMode.Single;
            treeList1.OptionsBehavior.Editable = false;
            treeList1.CalcNodeDragImageIndex += TreeList1_CalcNodeDragImageIndex;
            treeList1.AllowDrop = true;

            treeList1.DragDrop += TreeList1_DragDrop;
            treeList1.DragEnter += TreeList1_DragEnter;
            treeList1.DragOver += TreeList1_DragOver;
            treeList1.QueryContinueDrag += TreeList1_QueryContinueDrag;
            treeList1.NodeCellStyle += TreeList1_NodeCellStyle;
        }

        private void TreeList1_NodeCellStyle(object sender, GetCustomNodeCellStyleEventArgs e)
        {
            if(e.Node != null && e.Node.Tag != null)
            {
                var obj = e.Node.Tag;
                int id = 0;
                if(obj is EstimateProjectType)
                    id = ((EstimateProjectType)obj).EstimateProjectTypeId;
                else if(obj is EstimateCalculator)
                    id = ((EstimateCalculator)obj).EstimateCalculatorId;
                e.Appearance.BackColor = projectTypeColors[id];

            }
        }

        TreeListNode draggedNode = null;
        private void TreeList1_DragEnter(object sender, DragEventArgs e)
        {
            TreeList tl = sender as TreeList;
            draggedNode = tl.GetDXDragEventArgs(e).Node;
            object dragObject = e.Data.GetData(typeof(object));
            if(dragObject != null)
                e.Effect = DragDropEffects.Copy;
        }

        private void TreeList1_QueryContinueDrag(object sender, QueryContinueDragEventArgs e)
        {
            // if dropping node outside Treelist, remove it
            if(e.Action == DragAction.Drop)
            {
                TreeList tl = sender as TreeList;
                Rectangle rect = tl.RectangleToScreen(new Rectangle(0, 0, tl.Width, tl.Height));
                if(!rect.Contains(MousePosition))
                {
                    if(draggedNode.ParentNode == null)
                        tl.Nodes.Remove(draggedNode);
                    else
                        draggedNode.ParentNode.Nodes.Remove(draggedNode);
                }
                draggedNode = null;
            }
        }

        private void TreeList1_DragOver(object sender, DragEventArgs e)
        {
            TreeList tl = sender as TreeList;

            // see if we dragged a GridObject or a TreeListNode
            TreeListNode node = e.Data.GetData(typeof(TreeListNode)) as TreeListNode;
            if(node != null)
                e.Effect = GetDragDropEffect(tl, node);
            else
            {
                EstimateProjectType ept = e.Data.GetData(typeof(EstimateProjectType)) as EstimateProjectType;
                EstimateCalculator calc = e.Data.GetData(typeof(EstimateCalculator)) as EstimateCalculator;
                if(ept != null)
                    e.Effect = GetDragDropEffect(tl, ept);
                else
                    e.Effect = GetDragDropEffect(tl, calc);
            }
        }

        private void TreeList1_DragDrop(object sender, DragEventArgs e)
        {
            TreeList tl = sender as TreeList;
            DXDragEventArgs args = e.GetDXDragEventArgs(tl);
            TreeListNode targetNode = args.TargetNode;

            // get treelist drag node. if null, was dragging from gridcontrol
            TreeListNode dragNode = e.Data.GetData(typeof(TreeListNode)) as TreeListNode;

            // dropping TreeListNode
            if(dragNode != null)
            {
                // get drag and target parents
                TreeListNode dragParent = dragNode.ParentNode;
                TreeListNode targetParent = targetNode.ParentNode;

                int targetIndex = tl.GetNodeIndex(targetNode);
                int dragIndex = tl.GetNodeIndex(dragNode);

                // if dropping a parent node
                if(dragParent == null)
                    tl.MoveNode(dragNode, null, true, dragIndex < targetIndex ? targetIndex : targetIndex + 1);

                // if dropping a child node
                else
                {
                    // if dropping child into same parent
                    if(targetParent == dragParent) //  && dragParent != null)
                        tl.SetNodeIndex(dragNode, dragIndex < targetIndex ? targetIndex : targetIndex + 1);

                    // if dropping child into different parent
                    else
                    {
                        // dropping on a child of other parent
                        if(targetParent != null && targetParent != dragParent)
                            tl.MoveNode(dragNode, targetParent, true, tl.GetNodeIndex(targetNode) + 1); // DX: +1 to insert AFTER

                        // dropping on other parent node
                        if(targetParent == null && targetNode.Level != dragNode.Level) // DX: Insert a node into a root node
                            tl.MoveNode(dragNode, targetNode, true, 0);
                    }
                }
                e.Effect = DragDropEffects.None;
            }

            // dropping GridObject
            else
            {
                EstimateProjectType pt = args.Data.GetData(typeof(EstimateProjectType)) as EstimateProjectType;
                EstimateCalculator calc = args.Data.GetData(typeof(EstimateCalculator)) as EstimateCalculator;
                if(pt == null && calc == null)
                    return;
                TreeListNode parent = null;
                string description;
                if(pt != null)
                    description = pt.Description;
                else
                    description = calc.Description;

                TreeListNode newNode = tl.AppendNode(new object[] { description }, parent);
                if(pt == null)
                    newNode.Tag = calc;
                else
                    newNode.Tag = pt;

                if(targetNode != null)
                {
                    // dropping a CALCULATOR grid row onto root node, insert as first child
                    if(targetNode.Level == 0 && calc != null)
                        tl.MoveNode(newNode, targetNode, true, 0);

                    // dropping ANY type of grid row on any type of node, insert AFTER
                    else
                        tl.MoveNode(newNode, targetNode.ParentNode, true, tl.GetNodeIndex(targetNode) + 1);
                }
            }
            if(targetNode != null && targetNode.HasChildren)
                targetNode.Expanded = true;
            tl.Refresh();
        }

        private void TreeList1_CalcNodeDragImageIndex(object sender, CalcNodeDragImageIndexEventArgs e)
        {
            TreeList tl = sender as TreeList;
            DXDragEventArgs args = e.DragArgs.GetDXDragEventArgs(tl);
            TreeListNode node = args.Data.GetData(typeof(TreeListNode)) as TreeListNode;

            // draging treelist item
            if(node != null)
            {
                // invalid drop location, show nothing
                if(GetDragDropEffect(tl, node) == DragDropEffects.None)
                    e.ImageIndex = -1;

                // dropping a child onto a parent, show INSERT arrow
                else if(args.TargetNode.Level == 0 && node.Level > 0)
                    e.ImageIndex = 0;

                // otherwise show AFTER arrow
                else
                    e.ImageIndex = 2;
            }

            // dragging grid row
            else
            {
                EstimateProjectType pt = args.Data.GetData(typeof(EstimateProjectType)) as EstimateProjectType;
                EstimateCalculator calc = args.Data.GetData(typeof(EstimateCalculator)) as EstimateCalculator;
                bool isProject = pt != null;

                //object gridObject = args.Data.GetData(typeof(object));
                // invalid drop location, show nothing
                DragDropEffects dde;
                if(isProject)
                    dde = GetDragDropEffect(tl, pt);
                else
                    dde = GetDragDropEffect(tl, calc);

                if(dde == DragDropEffects.None)
                    e.ImageIndex = -1;  // no icon

                // dropping a CALCULATOR onto a parent, show INSERT arrow
                else if(args.TargetNode.Level == 0 && !isProject)
                    e.ImageIndex = 0;

                // otherwise show AFTER arrow
                else
                    e.ImageIndex = 2;
            }
        }

        #endregion

        #region GridControl init and events

        void InitGrids()
        {
            InitGrid(gridControl1);
            InitGrid(gridControl2);
        }

        void InitGrid(GridControl gc)
        {
            gc.MouseDown += GridControl_MouseDown;
            gc.MouseMove += GridControl_MouseMove;
            gc.GiveFeedback += GridControl_GiveFeedback;
            gc.AllowDrop = true;

            GridView gv = (GridView)gc.FocusedView;
            gv.RowStyle += GridView_RowStyle;
            gv.CustomDrawCell += GridView_CustomDrawCell;
            gv.RowHeight = 60;
            gv.Appearance.Row.FontSizeDelta = 1;
            gv.OptionsBehavior.Editable = false;
            gv.OptionsView.ShowGroupPanel = false;
            gv.OptionsView.ShowColumnHeaders = false;
            gv.OptionsView.ShowIndicator = false;
            gv.OptionsView.ShowHorizontalLines = DevExpress.Utils.DefaultBoolean.False;
            gv.OptionsSelection.EnableAppearanceFocusedCell = false;
            gv.OptionsSelection.EnableAppearanceFocusedRow = false;
            gv.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.None;
            gv.BeginDataUpdate();
            try
            {
                gv.ClearSorting();
                gv.Columns["Sequence"].SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            }
            finally
            {
                gv.EndDataUpdate();
            }

        }

        private void GridView_CustomDrawCell(object sender, RowCellCustomDrawEventArgs e)
        {
            GridView view = sender as GridView;
            using(Pen pen = new Pen(view.PaintAppearance.Empty.BackColor, 2.2f))
            {
                e.Cache.DrawRectangle(pen, e.Bounds);
            }
            Rectangle r = e.Bounds;
            int indent = 6;
            r.Offset(indent, 0);
            e.Appearance.DrawString(e.Cache, e.DisplayText, r);
            e.Handled = true;
        }

        private void GridControl_GiveFeedback(object sender, GiveFeedbackEventArgs e)
        {
            e.UseDefaultCursors = false;
            Cursor.Current = dragCursor;
        }

        private void GridView_RowStyle(object sender, RowStyleEventArgs e)
        {
            ColumnView view = (ColumnView)sender;
            if(view.IsValidRowHandle(e.RowHandle))
            {
                object gridRow = view.GetRow(view.FocusedRowHandle);
                if(gridRow is EstimateProjectType)
                    e.Appearance.BackColor = projectTypeColors[(int)view.GetRowCellValue(e.RowHandle, "EstimateProjectTypeId")];
                else if(gridRow is EstimateCalculator)
                    e.Appearance.BackColor = projectTypeColors[(int)view.GetRowCellValue(e.RowHandle, "EstimateCalculatorId")];
            }
        }

        GridHitInfo hitInfo = null;
        private void GridControl_MouseDown(object sender, MouseEventArgs e)
        {
            GridControl gc = sender as GridControl;
            GridView view = gc.GetViewAt(e.Location) as GridView;
            hitInfo = view.CalcHitInfo(new Point(e.X, e.Y));
        }

        Cursor dragCursor = null;
        private void GridControl_MouseMove(object sender, MouseEventArgs e)
        {
            if(hitInfo == null || e.Button != MouseButtons.Left)
                return;

            GridControl gc = sender as GridControl;
            Rectangle dragRect = new Rectangle(new Point(
                hitInfo.HitPoint.X - SystemInformation.DragSize.Width / 2,
                hitInfo.HitPoint.Y - SystemInformation.DragSize.Height / 2), SystemInformation.DragSize);

            if(!(hitInfo.RowHandle == GridControl.InvalidRowHandle) && !dragRect.Contains(new Point(e.X, e.Y)))
            {

                object gridRow = gc.FocusedView.GetRow(hitInfo.RowHandle);
                EstimateProjectType pt = gridRow as EstimateProjectType;
                EstimateCalculator calc = gridRow as EstimateCalculator;

                Bitmap rowImage = clsDragHelper.GetRowImage((GridView)gc.FocusedView, hitInfo.RowHandle);
                dragCursor = clsDragHelper.CreateCursor(rowImage, Point.Empty);
                Cursor.Current = dragCursor;

                if(pt != null)
                    gc.DoDragDrop(pt, DragDropEffects.Copy);
                else if(calc != null)
                    gc.DoDragDrop(new EstimateCalculator { EstimateCalculatorId = calc.EstimateCalculatorId, Description = calc.Description }, DragDropEffects.Copy);
            }
        }

        #endregion

        private void Form1_Load(object sender, EventArgs e)
        {
            // treelist setup

            //gridview setup



        }

        /// <summary>
        /// Get drag-drop effect for dragging within treelist
        /// </summary>
        /// <param name="tl">The TreeList control to apply effect to</param>
        /// <param name="dragNode">The TreeList node being dragged</param>
        /// <returns></returns>
        private DragDropEffects GetDragDropEffect(TreeList tl, TreeListNode dragNode)
        {
            // get node being dragged over
            TreeListNode targetNode;
            Point p = tl.PointToClient(MousePosition);
            targetNode = tl.CalcHitInfo(p).Node;

            // allow drag to another node at same level
            bool isOK;
            if(dragNode.Level == 0)
                isOK = dragNode != targetNode && targetNode.Level == 0;
            else
                isOK = dragNode != targetNode;// && targetNode.Level == 1;
            System.Diagnostics.Debug.WriteLine($"draglevel={dragNode.Level}, targetlevel={targetNode.Level}, OK={isOK}");
            return isOK ? DragDropEffects.Move : DragDropEffects.None;

        }

        ///// <summary>
        ///// Get drag-drop effect for dragging from grid control
        ///// </summary>
        ///// <param name="tl">The TreeList control to apply effect to</param>
        ///// <param name="dragObject">The grid control row being dragged</param>
        ///// <returns></returns>
        //private DragDropEffects GetDragDropEffect(TreeList tl, GridObject dragObject)
        //{
        //    // get node being dragged over
        //    TreeListNode targetNode;
        //    Point p = tl.PointToClient(MousePosition);
        //    targetNode = tl.CalcHitInfo(p).Node;

        //    // allow drag to project level if from project grid, else calculator level
        //    bool isOK = (dragObject.IsProject && targetNode == null) || (targetNode != null && targetNode.Level == (dragObject.IsProject ? 0 : 1));

        //    // in case of empty project allow dropping into project
        //    isOK = isOK | (!dragObject.IsProject && targetNode != null && targetNode.Level == 0);// && !targetNode.HasChildren);

        //    return isOK ? DragDropEffects.Copy : DragDropEffects.None;

        //}

        /// <summary>
        /// Get drag-drop effect for dragging project type from grid control
        /// </summary>
        /// <param name="tl">The TreeList control to apply effect to</param>
        /// <param name="dragObject">The grid control row being dragged</param>
        /// <returns></returns>
        private DragDropEffects GetDragDropEffect(TreeList tl, EstimateProjectType dragObject)
        {
            // get node being dragged over
            TreeListNode targetNode;
            Point p = tl.PointToClient(MousePosition);
            targetNode = tl.CalcHitInfo(p).Node;
            //bool isProject = true;// dragObject is EstimateProjectType;

            // allow drag to project level if from project grid, else calculator level
            //bool isOK = (isProject && targetNode == null) || (targetNode != null && targetNode.Level == (isProject ? 0 : 1));
            bool isOK = targetNode == null || (targetNode != null && targetNode.Level == 0);

            // in case of empty project allow dropping into project
            //isOK = isOK | (!isProject && targetNode != null && targetNode.Level == 0);

            return isOK ? DragDropEffects.Copy : DragDropEffects.None;

        }


        /// <summary>
        /// Get drag-drop effect for dragging calculator from grid control
        /// </summary>
        /// <param name="tl">The TreeList control to apply effect to</param>
        /// <param name="dragObject">The grid control row being dragged</param>
        /// <returns></returns>
        private DragDropEffects GetDragDropEffect(TreeList tl, EstimateCalculator dragObject)
        {
            // get node being dragged over
            TreeListNode targetNode;
            Point p = tl.PointToClient(MousePosition);
            targetNode = tl.CalcHitInfo(p).Node;
            //bool isProject = dragObject is EstimateProjectType;

            // allow drag to project level if from project grid, else calculator level
            bool isOK = (targetNode != null && targetNode.Level == 1);

            // in case of empty project allow dropping into project
            isOK = isOK | (targetNode != null && targetNode.Level == 0);

            return isOK ? DragDropEffects.Copy : DragDropEffects.None;

        }

    }

    public class GridObject
    {
        public int ID { get; set; }
        public string Description { get; set; }
        public bool IsProject { get; set; }
    }
}
